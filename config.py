import configparser
import os

config = configparser.RawConfigParser()
config.optionxform = str #not to convert config to lowercase
config.read('config.ini')

__vMajor__     = '3'
__vMinor__     = '8'
__vPatch__     = '0'
__vRel__       = 'e'
__version__    = __vMajor__ + '.' + __vMinor__ + '.' + __vPatch__ + __vRel__

BotToken = os.getenv('BotToken')
BotName = config.get('Bot','BotName')
GitHubToken = os.getenv('GitHubToken')

journalTemplate = config.get('Misc', 'journalTemplate', fallback="")
dateFormat = config.get('Misc', 'dateFormat', fallback='%b {th}, %Y')
GitHubBranch = config.get('GitHub','GitHubBranch')
GitHubUser = config.get('GitHub','GitHubUser')
GitHubRepo = config.get('GitHub','GitHubRepo')
GitHubAuthor = config.get('GitHub','GitHubAuthor')
GitHubEmail  = config.get('GitHub','GitHubEmail')
hour24 = (config.get('Misc','hour24')).lower()
defaultIndentLevel = (config.get('Misc','defaultIndentLevel'))
journalsFilesFormat = (config.get('Misc','journalsFilesFormat'))
journalsFilesExtension = (config.get('Misc','journalsFilesExtension'))
journalsFolder = (config.get('Misc','journalsFolder'))
journalsPrefix = (config.get('Misc','journalsPrefix'))
# TODOCommand = (config.get('Misc','TODOCommand'))
BookmarkTag = (config.get('Misc','BookmarkTag'))
assetsFolder = (config.get('Misc','assetsFolder'))
hypothesisToken = os.getenv('hypothesisToken')
hypothesisUsername = (config.get('hypothesis','hypothesisUsername'))
manageHypothesisUpdates = (config.get('hypothesis','manageHypothesisUpdates')).lower()
embedHypothesisAnnotations = (config.get('hypothesis','embedHypothesisAnnotations')).lower()
hypothesisTagSpaceHandler = (config.get('hypothesis','hypothesisTagSpaceHandler'))

def isBotAuthorized(chat_id):
    return any(
        str(chat_id) == str(BotAuthorizedId)
        for BotAuthorizedId in getBotAuthorizedIDs()
    )

def isNewer():
    try:
        LastVersionRun = config.get('Bot', 'LastVersionRun')
        if(__version__ != LastVersionRun):
            config.set('Bot', 'LastVersionRun', __version__)
            # with open('config.ini', 'r') as configfile: 
            #     config.write(configfile)
            return True
        else:
            return False
    except:
        config.set('Bot', 'LastVersionRun', __version__)
        # with open('config.ini', 'r') as configfile: 
        #     config.write(configfile)
        return True

def getBotVersion():
    return __version__

def getBotAuthorizedIDs():
    return config.get('Bot','BotAuthorizedIDs').split(',')

def isManageHypothesis():
    if manageHypothesisUpdates == 'true':
        return True
    else:
        return False

def isHypothesisEmbedded():
    if embedHypothesisAnnotations == 'true':
        return True
    else:
        return False

def getHypothesisTagSpaceHandler():
    return hypothesisTagSpaceHandler

def getAssetsFolder():
    return assetsFolder

def getAssetsDestination():
    return config.get('Bot','assetsDestination').lower()

def getFirebaseBucketName():
    return config.get('Firebase','BucketName')

def getflashcardDailyGoal():
    return int(config.get('TimeSpacedRepetion', 'flashcardDailyGoal'))

def getflashcardsTag():
    return config.get('TimeSpacedRepetion', 'flashcardTag') 

def getlastNewsDisplayed():
    try:
        lastNewsDisplayed = config.get('Bot', 'lastNewsDisplayed') 
    except:
        lastNewsDisplayed = 0
        config.set('Bot', 'lastNewsDisplayed', lastNewsDisplayed)
        # with open('config.ini', 'r') as configfile: 
        #     config.write(configfile)   
    return lastNewsDisplayed

def setlastNewsDisplayed(newsid):
    config.set('Bot', 'lastNewsDisplayed', newsid)
    # with open('config.ini', 'r') as configfile: 
    #     config.write(configfile)   

def getGitHubUpdateFrequency():
    return int(config.get('GitHub', 'GitHubUpdateFrequency', fallback='720'))*60

def isCalendarsAutogenerated():
    # moveConfigSection('Bot','CalendarOptions', 'autoGenerateCalendars')
    return (
        config.get(
            'CalendarOptions', 'autoGenerateCalendars', fallback='false'
        )
        == 'true'
    )


def getfirstDayOfWeek():
    # moveConfigSection('Misc', 'CalendarOptions', 'firstDayOfWeek')
    return int(config.get('CalendarOptions', 'firstDayOfWeek'))

def getcalendarFile():
    # moveConfigSection('Misc','CalendarOptions', 'calendarFile')
    return config.get('CalendarOptions', 'calendarFile')

def isEntryTimestamped():
    return config.get('Bot', 'timestampEntries', fallback='true') == 'true'

def getCommandsMap():
    from ast import literal_eval
    return literal_eval(config.get('Misc', 'CommandsMap', fallback="{'TODO':'TODO', 'LATER':'LATER'}"))

def getMonths2Generate():
    return config.get('CalendarOptions', 'generateMonths', fallback="1,1").split(',')    


def moveConfigSection(oldSection, newSection, key):
    try:
        keyVal = config.get(oldSection, key)
        config.remove_option(oldSection,key)

        try:
            config.add_section(newSection)
        except:
            pass

        config.set(newSection, key, keyVal)
        # with open('config.ini', 'r') as configfile: 
        #     config.write(configfile)

    except:
        pass
def getAgePublicKey():
    return config.get('AgeEncryption', 'AgePublicKey')

def generateAgeKeyFile():
    keys_filename = os.path.expanduser("~/.config/age/keys.txt")
    KEYFILE  = "# created: 2020-02-25T00:00:00\n# {}\n{}\n".format(getAgePublicKey(),config.get('AgeEncryption', 'AgePrivateKey'))

    # with open(keys_filename, 'w') as f:
    f =  open(keys_filename, 'w') 
    f.write(KEYFILE)
    f.close()

def isGraphAgeEncrypted():
    return config.get('AgeEncryption', 'AgeEncrypted', fallback='false') == 'true'

def setGraphAgeEncrypted(state):
    config.set('AgeEncryption', 'AgeEncrypted', state)
    # with open('config.ini', 'r') as configfile: 
    #     config.write(configfile)
